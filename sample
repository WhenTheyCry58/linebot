var channel_access_token = "自身のチャンネルトークンを入力";

// ボットにメッセージ送信/フォロー/アンフォローした時の処理
function doPost(e) {
  var events = JSON.parse(e.postData.contents).events;
  events.forEach(function(event) {
    if(event.type == "message") {
      reply(event);
    } else if(event.type == "follow") {
      follow(event);
    } else if(event.type == "unfollow") {
      unFollow(event);
    }
 });
}

// 入力されたメッセージをおうむ返し
function reply(e) {
  var message = {
    "replyToken" : e.replyToken,
    "messages" : [
      {
        "type" : "text",
        "text" : s_judge(e)
      }
    ]
  };
  var replyData = {
    "method" : "post",
    "headers" : {
      "Content-Type" : "application/json",
      "Authorization" : "Bearer " + channel_access_token
    },
    "payload" : JSON.stringify(message)
  };
  UrlFetchApp.fetch("https://api.line.me/v2/bot/message/reply", replyData);
}

//文字判断
function s_judge(e){
  if(e.message.text=="掃除"||e.message.text=="そうじ"){
    let rusult = souji();
    let contents = "本日の掃除は" + rusult + "さんです";
    return contents;
  }else if(e.message.text.slice(0,2)=="登録"){
    let applymessage = e.message.text.slice(2);
    anyapply(applymessage);
    return "登録が完了しました";
  }else if(e.message.type=="text"){
    talkapply(e.message.text);
    return e.message.text;
  }else{
    return "text以外は返せません";
  }
}

//スプレッドシート内容取得
function souji(){

  let spreadSheetById = SpreadsheetApp.openById("スプレッドシートのidを入力").getSheetByName("シートの名前を入力");
  let sheetdata = spreadSheetById.getRange(2,2,9);
  let result = getRandomInt(0, 9);
  let celldata = sheetdata.getValues()[result];
  soujicount(result);
  let stringcell = celldata.toString();
  Logger.log(stringcell);

  return stringcell;
}

/* フォローされた時の処理 */
function follow(e) {
}

/* アンフォローされた時の処理 */
function unFollow(e){
}

//minとmaxの間の整数を返す
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
}

//掃除回数のカウント
function soujicount(row){
  let spreadSheetById = SpreadsheetApp.openById("スプレッドシートのidを入力").getSheetByName("シートの名前を入力");
  let range = spreadSheetById.getRange(row+2,3);
  let count = range.getValue();
  if(count==null){
    range.setValue(1);
  }else{
    range.setValue(count+1);
  }
}

//スプレッドシートに値を挿入
function talkapply(body){
  let spreadSheetById = SpreadsheetApp.openById("スプレッドシートのidを入力").getSheetByName("シートの名前を入力");
  let row;
  for(let i=1; i++;){
    let range = spreadSheetById.getRange(i,1);
    if(range.isBlank()){row=i; break;}
  }
  let rangeA = spreadSheetById.getRange(row,1);
  rangeA.setValue(body);
  let rangeB = spreadSheetById.getRange(row,2);
  let date = getnow();
  rangeB.setValue(date);
}

//受信時刻の取得
function getnow(){
  let d = new Date();
  let y = d.getFullYear();
  let mon = d.getMonth() + 1;
  let d2 = d.getDate();
  let h = d.getHours();
  let min = d.getMinutes();
  let s = d.getSeconds();
  let now = y+"/"+mon+"/"+d2+" "+h+":"+min+":"+s;
  return now;
}

//任意の文字登録
function anyapply(applydate){
  let spreadSheetById = SpreadsheetApp.openById("スプレッドシートのidを入力").getSheetByName("シートの名前を入力");
  let row;
  for(let i=1;i++;){
    let range = spreadSheetById.getRange(i,1);
    if(range.isBlank()){row=i;break;}
  }
  let applycell = spreadSheetById.getRange(row,1);
  applycell.setValue(applydate);
}
